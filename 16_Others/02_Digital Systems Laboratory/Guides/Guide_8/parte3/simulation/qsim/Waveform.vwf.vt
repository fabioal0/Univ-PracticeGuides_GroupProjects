// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/02/2017 12:12:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          maquina
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module maquina_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg clock;
reg reset;
reg V;
// wires                                               
wire Abrir;

// assign statements (if any)                          
maquina i1 (
// port map - connection between master ports and signals/registers   
	.Abrir(Abrir),
	.C(C),
	.clock(clock),
	.reset(reset),
	.V(V)
);
initial 
begin 
#1200000 $finish;
end 

// C
initial
begin
	C = 1'b0;
	C = #590000 1'b1;
	C = #20000 1'b0;
	C = #50000 1'b1;
	C = #40000 1'b0;
	C = #130000 1'b1;
	C = #30000 1'b0;
end 

// clock
initial
begin
	repeat(12)
	begin
		clock = 1'b0;
		clock = #40000 1'b1;
		# 40000;
	end
	repeat(3)
	begin
		clock = 1'b0;
		clock = #40000 1'b1;
		# 40000;
	end
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #20000 1'b1;
	reset = #30000 1'b0;
end 

// V
initial
begin
	V = 1'b0;
	V = #110000 1'b1;
	V = #20000 1'b0;
	V = #60000 1'b1;
	V = #20000 1'b0;
	V = #60000 1'b1;
	V = #30000 1'b0;
	V = #50000 1'b1;
	V = #20000 1'b0;
	V = #20000 1'b1;
	V = #60000 1'b0;
	V = #460000 1'b1;
	V = #40000 1'b0;
	V = #30000 1'b1;
	V = #40000 1'b0;
end 
endmodule

