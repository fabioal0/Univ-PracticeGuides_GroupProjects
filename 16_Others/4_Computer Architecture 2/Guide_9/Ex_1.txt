#include <detpic32.h>

#define DisableUart1RxInterrupt() IEC0bits.U1RXIE = 0
#define EnableUart1RxInterrupt() IEC0bits.U1RXIE = 1
#define DisableUart1TxInterrupt() IEC0bits.U1TXIE = 0
#define EnableUart1TxInterrupt()  IEC0bits.U1TXIE = 1

#define BUF_SIZE 8
#define INDEX_MASK (BUF_SIZE – 1) 

typedef struct
 {
 unsigned char data[BUF_SIZE];
 unsigned int head;
 unsigned int tail;
 unsigned int count;
 } circularBuffer; 

 volatile circularBuffer txb; // Transmission buffer
 volatile circularBuffer rxb; // Reception buffer 

void comDrv_flushRx(void)
 {
	rxb.head=0;
	rxb.tail=0;
	rxb.count=0;

 }
 void comDrv_flushTx(void)
 {
	txb.head=0; 
	txb.tail=0;
	txb.count=0;

 } 

void comDrv_putc(char ch)
 {
 	while(txb.count == BUF_SIZE){} // Wait while buffer is full
 	txb.data[txb.tail] = ch; // Copy character to the transmission
 
	// buffer at position "tail"
	
	txb.tail = (txb.tail + 1) & INDEX_MASK; // Increment "tail" index
 
	// (mod. BUF_SIZE)
 
	DisableUart1TxInterrupt(); // Begin of critical section 
	tbx.count++; // Increment "count" variable
	EnableUart1TxInterrupt(); // End of critical section
 } 

void comDrv_puts(char *s)
 {
 	while(*s!=0){	
		com
		s++;
	}
 }

// config interrupt
********************************************************************
 // if U1TXIF is set
 {
 // if "count" variable (transmission buffer, txb) is greater than 0
 {
 // Copy character pointed by "head" to U1TXREG register
 // Increment "head" variable (mod BUF_SIZE)
 // Decrement "count" variable
 }
 // if "count" variable is 0 then
 DisableUart1TxInterrupt();
 // Reset UART1 TX interrupt flag
 } 
********************************************************************

int main(void)
 {
	comDrv_config(115200,'N',1); 					// default "pterm" parameters
 									// with TX and RX interrupts disabled
 	comDrv_flushRx();
 	comDrv_flushTx();

	U1STAbits.UTXSEL=0;
	U1STAbits.URXISEL=0;
	IFS0bits.U1RXIF=0;
	IFS0bits.U1TXIF=0;
	IFS0bits.U1EIF=0;
	IPC6bits.UIIP =2;

 	EnableInterrupts();

 	while(1)
 	comDrv_puts("Teste do bloco de transmissao do device driver!..."); 
}

//********************************************************************
//********************************************************************
//antes da main; 
U1BRG =((PBCLK+(8*band))/(16*band))-1;

swtch(parity){

case'E':			//ewen parity
U1.MODEbits.PDSEL=1;
break;

case'O':			//odd parity
U1.MODEbits.PDSEL=2;
break;

case'N':			//no parity
U1.MODEbits.PDSEL=0;
break;

default:			//parity value not allowd
U1.MODEbits.PDSEL=0;
break;
}

//**********************************************************************
//**********************************************************************
}